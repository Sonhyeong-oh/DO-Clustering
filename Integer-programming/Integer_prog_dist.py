import torch
import numpy as np
from pulp import *
import random
import time
from itertools import combinations
import Integer_prog_dist_function as ipf

num_clusters = 4 # 클러스터 수
max_solutions = 10 # 탐색할 최대 해의 수
timeout_per_solution = 60 # 각 해당 찾기 시간 제한 (초 단위)


# 실행 예제
# 데이터 설정
fixed_net_demand = torch.tensor([
    [  3, -4,  2], [ -2,  3, -1], [  4,  1, -3],
    [ -3, -2,  4], [  2,  5, -2], [ -1, -3,  3],
    [  5,  2, -4], [ -4,  1,  5], [  1, -1, -3],
    [ -2,  4,  2], [  3, -5,  1], [ -5,  3, -2],
    [  2, -2,  3], [ -1,  1, -1], [  4, -3, -5],
    [ -3,  2,  4], [ -2, -1,  2], [ -1, -1, -5] 
], dtype=torch.float32)

dist_matrix = torch.tensor([
    [0,   84,  160, 200, 222, 108, 209, 38,  61,  150, 119, 148, 78,  30,  44,  82,  116, 114],
    [84,  0,   127, 166, 141, 181, 175, 60,  20,  72,  70,  123, 156, 112, 122, 112, 202, 158],
    [160, 127, 0,   47,  99,  65,  59,  134, 107, 117, 90,  68,  243, 187, 128, 110, 96,  53 ],
    [200, 166, 47,  0,   54,  104, 14,  173, 146, 114, 129, 76,  282, 227, 168, 150, 136, 89 ],
    [222, 141, 99,  54,  0,   164, 47,  189, 159, 64,  84,  52,  287, 249, 216, 198, 185, 142],
    [108, 181, 65,  104, 164, 0,   118, 105, 138, 171, 144, 138, 221, 118, 67,  50,  25,  17 ],
    [209, 175, 59,  14,  47,  118, 0,   184, 159, 108, 107, 78,  293, 237, 178, 160, 147, 102],
    [38,  60,  134, 173, 189, 105, 184, 0,   34,  124, 87,  116, 123, 65,  64,  54,  109, 90 ],
    [61,  20,  107, 146, 159, 138, 159, 34,  0,   95,  55,  85,  145, 87,  97,  83,  178, 119],
    [150, 72,  117, 114, 64,  171, 108, 124, 95,  0,   29,  52,  224, 187, 197, 186, 199, 151],
    [119, 70,  90,  129, 84,  144, 107, 87,  55,  29,  0,   31,  211, 143, 150, 128, 171, 124],
    [148, 123, 68,  76,  52,  138, 78,  116, 85,  52,  31,  0,   262, 220, 197, 142, 166, 118],
    [78,  156, 243, 282, 287, 221, 293, 123, 145, 224, 211, 262, 0,   61,  119, 149, 192, 211],
    [30,  112, 187, 227, 249, 118, 237, 65,  87,  187, 143, 220, 61,  0,   44,  73,  155, 143],
    [44,  122, 128, 168, 216, 67,  178, 64,  97,  197, 150, 197, 119, 44,  0,   31,  75,  74 ],
    [82,  112, 110, 150, 198, 50,  160, 54,  83,  186, 128, 142, 149, 73,  31,  0,   57,  55 ],
    [116, 202, 96,  136, 185, 25,  147, 109, 178, 199, 171, 166, 192, 155, 75,  57,  0,   43 ],
    [114, 158, 53,  89,  142, 17,  102, 90,  119, 151, 124, 118, 211, 143, 74,  55,  43,  0  ]
], dtype=torch.float32)

city_names = ['춘천', '원주', '강릉', '동해', '태백', '속초', '삼척', '홍천', 
             '횡성', '영월', '평창', '정선', '철원', '화천', '양구', '인제', '고성', '양양']

print("🎯 거리 최적화 기반 해 선택 시작...")
print("📌 방식: 각 클러스터의 총 거리를 구하고, 그 평균이 가장 작은 해를 선택")

# 여러 해 탐색 및 최적 거리 해 선택
best_result, all_solutions = ipf.solve_multiple_solutions_with_distance_selection(
    fixed_net_demand, dist_matrix, 
    num_clusters=num_clusters, 
    max_solutions=max_solutions,  # 5개 해 탐색
    timeout_per_solution=timeout_per_solution  # 각 해당 60초 제한
)

if best_result:
    ipf.print_distance_comparison_results(best_result, all_solutions, num_clusters, city_names)
else:
    print("❌ 해를 찾지 못했습니다.")
